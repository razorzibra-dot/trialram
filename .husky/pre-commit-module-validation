#!/bin/sh
# Pre-commit hook for Module Service Standardization Validation
# Validates all staged changes comply with standardization rules

echo "🔍 Module Standardization Validation..."
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

ERRORS=0

# Get staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

# Filter for TypeScript/JavaScript files in modules
MODULE_FILES=$(echo "$STAGED_FILES" | grep -E "^src/modules/features.*\.(tsx?|jsx?)$" || true)

if [ -z "$MODULE_FILES" ]; then
    echo "✅ No module files to validate"
    exit 0
fi

echo ""
echo "📋 Checking $(echo "$MODULE_FILES" | wc -l) module files..."
echo ""

# Check 1: No direct serviceFactory imports in component files
echo "🔍 Check 1: Direct service imports..."

while IFS= read -r file; do
    # Skip hook files and service files
    if echo "$file" | grep -qE "/(hooks|services|test)/"; then
        continue
    fi
    
    # Check for direct service imports
    if grep -q "from '@/services/serviceFactory'" "$file" || \
       grep -q "from '@/services/.*Service'" "$file" || \
       grep -q "from '@/services/api/supabase" "$file"; then
        
        # Make sure it's a component file (not a hook or service)
        if ! grep -q "export.*function\|export.*const.*use" "$file"; then
            echo "${RED}❌ ${NC}$file"
            echo "    Direct service import detected - use useService hook instead"
            ERRORS=$((ERRORS + 1))
        fi
    fi
done <<EOF
$MODULE_FILES
EOF

if [ $ERRORS -eq 0 ]; then
    echo "✅ No direct service imports found"
else
    echo "${RED}❌ Found $ERRORS direct service import issues${NC}"
fi

# Check 2: Type-only imports
echo ""
echo "🔍 Check 2: Type-only imports..."

TYPE_ONLY_ERRORS=0
while IFS= read -r file; do
    # Check for non-type imports from type files
    # This is a simplified check
    if grep -q "^import.*from '@/types/" "$file" && \
       ! grep -q "^import type.*from '@/types/" "$file"; then
        
        # Check if it might be importing types incorrectly
        # (This is a best-effort check)
        if grep -q "import {.*} from '@/types/" "$file" | head -1; then
            TYPE_ONLY_ERRORS=$((TYPE_ONLY_ERRORS + 1))
        fi
    fi
done <<EOF
$MODULE_FILES
EOF

if [ $TYPE_ONLY_ERRORS -eq 0 ]; then
    echo "✅ Type imports look good"
fi

# Check 3: Module index files have required structure
echo ""
echo "🔍 Check 3: Module structure validation..."

MODULE_INDEX_ERRORS=0
while IFS= read -r file; do
    if echo "$file" | grep -q "^src/modules/features/[^/]*/index.ts$"; then
        
        # Check for initialize method
        if ! grep -q "async initialize" "$file"; then
            echo "${RED}❌ ${NC}$file"
            echo "    Missing initialize() method"
            MODULE_INDEX_ERRORS=$((MODULE_INDEX_ERRORS + 1))
        fi
        
        # Check for cleanup method
        if ! grep -q "async cleanup" "$file"; then
            echo "${RED}❌ ${NC}$file"
            echo "    Missing cleanup() method"
            MODULE_INDEX_ERRORS=$((MODULE_INDEX_ERRORS + 1))
        fi
        
        # Check for services array
        if ! grep -q "services:" "$file"; then
            echo "${RED}❌ ${NC}$file"
            echo "    Missing services array"
            MODULE_INDEX_ERRORS=$((MODULE_INDEX_ERRORS + 1))
        fi
        
        # Check for try-catch in initialize
        if ! grep -q "try {" "$file"; then
            echo "${YELLOW}⚠️  ${NC}$file"
            echo "    Missing try-catch in initialize method"
        fi
    fi
done <<EOF
$STAGED_FILES
EOF

if [ $MODULE_INDEX_ERRORS -eq 0 ]; then
    echo "✅ Module structure is valid"
fi

# Check 4: No cross-module imports
echo ""
echo "🔍 Check 4: Cross-module imports..."

CROSS_MODULE_ERRORS=0
while IFS= read -r file; do
    # Extract module name from path
    MODULE_NAME=$(echo "$file" | sed -n 's|.*/modules/features/\([^/]*\)/.*|\1|p')
    
    if [ -n "$MODULE_NAME" ]; then
        # Check for imports from other feature modules
        IMPORTS=$(grep -o "@/modules/features/[^/]*/\(hooks\|services\|pages\|views\|components\)" "$file" || true)
        
        while IFS= read -r import_path; do
            IMPORTED_MODULE=$(echo "$import_path" | sed -n 's|.*/features/\([^/]*\)/.*|\1|p')
            
            # Skip if same module or core/shared
            if [ "$IMPORTED_MODULE" != "$MODULE_NAME" ] && \
               [ "$IMPORTED_MODULE" != "core" ] && \
               [ "$IMPORTED_MODULE" != "shared" ]; then
                
                echo "${RED}❌ ${NC}$file"
                echo "    Cross-module import: $import_path"
                CROSS_MODULE_ERRORS=$((CROSS_MODULE_ERRORS + 1))
            fi
        done <<EOF2
$IMPORTS
EOF2
    fi
done <<EOF
$MODULE_FILES
EOF

if [ $CROSS_MODULE_ERRORS -eq 0 ]; then
    echo "✅ No cross-module imports detected"
fi

# Summary
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

TOTAL_ERRORS=$((ERRORS + MODULE_INDEX_ERRORS + CROSS_MODULE_ERRORS))

if [ $TOTAL_ERRORS -eq 0 ]; then
    echo "${GREEN}✅ Module Standardization Validation PASSED${NC}"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    exit 0
else
    echo "${RED}❌ Module Standardization Validation FAILED${NC}"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
    echo "Issues found: $TOTAL_ERRORS"
    echo ""
    echo "Please fix the issues above and try again."
    echo ""
    echo "Reference: MODULE_STANDARDIZATION_STRICT_ENFORCEMENT.md"
    exit 1
fi