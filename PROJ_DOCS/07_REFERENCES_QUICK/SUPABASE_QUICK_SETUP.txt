╔════════════════════════════════════════════════════════════════════════════╗
║                  PDS-CRM SUPABASE QUICK SETUP                              ║
║                        (Follow these 3 steps)                              ║
╚════════════════════════════════════════════════════════════════════════════╝

█████████████████████████████████████████████████████████████████████████████████

🔧 STEP 1: Install Supabase CLI (One-time only)
═════════════════════════════════════════════════════════════════════════════════

  Command:
  ┌─────────────────────────────────────────────────────────────────────────────┐
  │ npm install -g supabase                                                     │
  └─────────────────────────────────────────────────────────────────────────────┘

  This installs the Supabase command-line tool globally on your system.

🔍 Verify Installation:
  ┌─────────────────────────────────────────────────────────────────────────────┐
  │ supabase --version                                                          │
  └─────────────────────────────────────────────────────────────────────────────┘

█████████████████████████████████████████████████████████████████████████████████

🚀 STEP 2: Start Supabase Backend (Terminal 1)
═════════════════════════════════════════════════════════════════════════════════

  Command:
  ┌─────────────────────────────────────────────────────────────────────────────┐
  │ supabase start                                                              │
  └─────────────────────────────────────────────────────────────────────────────┘

  What happens:
  ✓ Starts PostgreSQL database locally
  ✓ Initializes Supabase backend
  ✓ Creates API server on http://localhost:54321
  ✓ Creates Supabase Studio on http://localhost:54323

  Expected output:
  ┌─────────────────────────────────────────────────────────────────────────────┐
  │ ✓ Started supabase local development setup                                  │
  │ ✓ Postgres database: postgresql://postgres:postgres@localhost:54322/...    │
  │ ✓ Supabase API: http://localhost:54321                                     │
  │ ✓ Supabase Studio: http://localhost:54323                                  │
  │ ✓ Realtime API: wss://localhost:54321                                      │
  └─────────────────────────────────────────────────────────────────────────────┘

  ⚠️  Keep this terminal running! Don't close it while developing.

█████████████████████████████████████████████████████████████████████████████████

💻 STEP 3: Start Development Server (Terminal 2 - NEW TERMINAL)
═════════════════════════════════════════════════════════════════════════════════

  Command:
  ┌─────────────────────────────────────────────────────────────────────────────┐
  │ npm run dev                                                                 │
  └─────────────────────────────────────────────────────────────────────────────┘

  Expected output:
  ┌─────────────────────────────────────────────────────────────────────────────┐
  │ ✓ VITE v4.5.14  ready in 615 ms                                            │
  │                                                                             │
  │ ➜  Local:   http://localhost:5000/                                         │
  │ ➜  Network: http://192.168.x.x:5000/                                       │
  └─────────────────────────────────────────────────────────────────────────────┘

  ⚠️  This must be in a DIFFERENT terminal from Supabase!

█████████████████████████████████████████████████████████████████████████████████

✅ VERIFY SETUP
═════════════════════════════════════════════════════════════════════════════════

  Step A: Open Application in Browser
  ┌─────────────────────────────────────────────────────────────────────────────┐
  │ http://localhost:5000                                                       │
  └─────────────────────────────────────────────────────────────────────────────┘

  Step B: Check Backend Mode (Browser Console)
  ┌─────────────────────────────────────────────────────────────────────────────┐
  │ 1. Press F12 (open DevTools)                                               │
  │ 2. Go to "Console" tab                                                      │
  │ 3. Look for: 🗄️  API Mode: supabase                                         │
  │              🗄️  Supabase URL: http://localhost:54321                      │
  └─────────────────────────────────────────────────────────────────────────────┘

  Step C: Test Real-Time Sync
  ┌─────────────────────────────────────────────────────────────────────────────┐
  │ 1. Open the app in TWO browser tabs/windows                                 │
  │ 2. In Tab 1: Create or update a customer                                    │
  │ 3. In Tab 2: Watch it appear/update instantly! ✨                           │
  └─────────────────────────────────────────────────────────────────────────────┘

█████████████████████████████████████████████████████████████████████████████████

🎯 SYSTEM ARCHITECTURE
═════════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────┐
│                                                                             │
│  Browser (Port 5000)                                                        │
│  ┌────────────────────────────────────────────────────────────────────┐   │
│  │  React Components                                                  │   │
│  │  • CustomerList                                                    │   │
│  │  • SalesPipeline                                                   │   │
│  │  • TicketQueue                                                     │   │
│  │  • ContractManager                                                 │   │
│  └────────────────────┬─────────────────────────────────────────────┘   │
│                       │                                                   │
│  Phase 4 Hooks (src/hooks/)                                              │
│  ┌────────────────────────────────────────────────────────────────────┐   │
│  │  • useSupabaseCustomers()                                          │   │
│  │  • useSupabaseSales()                                              │   │
│  │  • useSupabaseTickets()                                            │   │
│  │  • useSupabaseContracts()                                          │   │
│  └────────────────────┬─────────────────────────────────────────────┘   │
│                       │                                                   │
│  Service Factory (src/services/api/apiServiceFactory.ts)                │
│  ┌────────────────────────────────────────────────────────────────────┐   │
│  │  Intelligent Router → Chooses backend based on .env               │   │
│  └────────────────────┬─────────────────────────────────────────────┘   │
│                       │                                                   │
│  ┌─────────────────────────────────────────────────────────────────┐    │
│  │                                                                 │    │
│  ▼         ▼                   ▼                                   │    │
│ Mock     Real .NET            Supabase                            │    │
│ API      Backend              (Selected)                          │    │
│          (5137)               (54321)                             │    │
│                                   ▲                                │    │
│                                   │                                │    │
│          Network ════════════════════════════════════════════════════   │
│                                   │                                │    │
│                    ┌──────────────▼──────────────┐                │    │
│                    │  Supabase Local Backend     │                │    │
│                    │  (http://localhost:54321)  │                │    │
│                    │                            │                │    │
│                    │  • PostgreSQL Database     │                │    │
│                    │  • Real-time API           │                │    │
│                    │  • Row Level Security      │                │    │
│                    │  • Authentication (JWT)    │                │    │
│                    │  • Subscriptions           │                │    │
│                    │                            │                │    │
│                    └────────────────────────────┘                │    │
│                                                                   │    │
└─────────────────────────────────────────────────────────────────────────┘

█████████████████████████████████████████████████████████████████████████████████

📊 DATA FLOW EXAMPLE
═════════════════════════════════════════════════════════════════════════════════

Scenario: Fetch Customers with useSupabaseCustomers()

User Action:
┌────────────────────────────────────┐
│ Component loads with hook:         │
│ useSupabaseCustomers()             │
└────────────┬───────────────────────┘
             │
             ▼
┌────────────────────────────────────┐
│ Phase 4 Hook:                      │
│ 1. Reads .env (VITE_API_MODE)      │
│ 2. Calls customerService           │
│ 3. Manages loading/error states    │
└────────────┬───────────────────────┘
             │
             ▼
┌────────────────────────────────────┐
│ Service Factory:                   │
│ Checks VITE_CUSTOMER_BACKEND       │
│ → "supabase" detected              │
│ → Calls supabaseCustomerService    │
└────────────┬───────────────────────┘
             │
             ▼
┌────────────────────────────────────┐
│ Supabase Customer Service:         │
│ • GET http://localhost:54321/...   │
│ • Fetch customers from DB          │
│ • Subscribe to real-time changes   │
└────────────┬───────────────────────┘
             │
             ▼
┌────────────────────────────────────┐
│ PostgreSQL (via Supabase):         │
│ SELECT * FROM customers WHERE ...  │
│ Returns: [{ id, company, ... }]    │
└────────────┬───────────────────────┘
             │
             ▼
┌────────────────────────────────────┐
│ Back to Hook:                      │
│ • Sets customers = [...]           │
│ • Sets loading = false             │
│ • Component re-renders             │
└────────────┬───────────────────────┘
             │
             ▼
┌────────────────────────────────────┐
│ Browser Screen:                    │
│ Customer List Displays:            │
│ • Acme Corp                        │
│ • Beta Industries                  │
│ • Gamma Solutions                  │
└────────────────────────────────────┘

█████████████████████████████████████████████████████████████████████████████████

🔄 REAL-TIME SYNC EXAMPLE
═════════════════════════════════════════════════════════════════════════════════

Scenario: Two users see live updates

Tab 1 (User A):                       Tab 2 (User B):
┌─────────────────────────┐           ┌─────────────────────────┐
│ CustomerList Component  │           │ CustomerList Component  │
│                         │           │                         │
│ Customers:              │           │ Customers:              │
│ • Acme Corp             │           │ • Acme Corp             │
│ • Beta Industries       │           │ • Beta Industries       │
│ • Gamma Solutions       │           │ • Gamma Solutions       │
│                         │           │                         │
└────────────┬────────────┘           └────────────┬────────────┘
             │                                     │
             │ Updates customer name              │
             │ "Acme Corp" → "ACME Global"       │
             │                                     │
             ▼                                     │
         Hook calls update()                      │
             │                                     │
             ▼                                     │
     Supabase Backend                            │
    (PostgreSQL + Realtime)                      │
         │                                        │
         │ ← ← ← ← ← ← ← Real-time Subscription  │
         │                                        │
         └────────────────────────────────────────┘
                                                   │
                                                   ▼
                                    Hook receives subscription event
                                                   │
                                                   ▼
                                    Component automatically re-renders
                                                   │
                                                   ▼
                                    Tab 2 shows: "ACME Global" ✨

█████████████████████████████████████████████████████████████████████████████████

🛠️ HANDY COMMANDS
═════════════════════════════════════════════════════════════════════════════════

View Supabase Studio (Data Explorer):
  supabase studio
  → Opens: http://localhost:54323

Reset Database:
  supabase db reset

Stop Supabase:
  supabase stop

View Logs:
  supabase logs --project-ref local

Check Supabase Status:
  supabase status

Pull Latest Schema:
  supabase pull

Push Local Changes:
  supabase push

█████████████████████████████████████████████████████████████████████████████████

⚠️ COMMON ISSUES & FIXES
═════════════════════════════════════════════════════════════════════════════════

Issue 1: "Connection refused on port 54321"
  Fix: Make sure supabase start is running in Terminal 1
       Check: supabase status

Issue 2: "Cannot read properties of undefined"
  Fix: Clear browser cache (Ctrl+Shift+Delete)
       Reload page (F5)

Issue 3: "Port 5000 already in use"
  Fix: Kill existing process:
       netstat -ano | findstr :5000
       taskkill /PID <PID> /F

Issue 4: "Real-time not working"
  Fix: Check .env has:
       VITE_SUPABASE_ENABLE_REALTIME=true

Issue 5: "Database migrations not applied"
  Fix: Run supabase db reset
       Or: supabase db push

█████████████████████████████████████████████████████████████████████████████████

✨ YOU'RE ALL SET!
═════════════════════════════════════════════════════════════════════════════════

Your CRM Application is now running with:
  ✓ Supabase Backend (Local)
  ✓ Real-time Synchronization
  ✓ PostgreSQL Database
  ✓ Phase 4 Custom Hooks
  ✓ Multi-tenant Architecture
  ✓ Role-based Access Control
  ✓ JWT Authentication

Start Building! 🚀

═════════════════════════════════════════════════════════════════════════════════