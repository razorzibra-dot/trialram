/**
 * ============================================================================
 * SYNC AUTH USERS TO SEED.SQL
 * ============================================================================
 * 
 * This script reads the auth-users-config.json generated by seed-auth-users.ts
 * and updates the supabase/seed.sql file with the actual user IDs.
 * 
 * This ensures that when `supabase db reset` is run, the database users
 * are created with the same IDs as the auth users, keeping them in sync.
 * 
 * Usage:
 *   tsx scripts/sync-auth-to-sql.ts
 * 
 * ============================================================================
 */

import * as fs from 'fs';
import * as path from 'path';

interface AuthUser {
  email: string;
  displayName: string;
  tenant: string;
  userId: string;
  createdAt: string;
}

interface AuthConfig {
  createdAt: string;
  supabaseUrl: string;
  users: AuthUser[];
}

interface UserMapping {
  email: string;
  oldId: string;
  newId: string;
}

const rootDir = process.cwd();
const authConfigPath = path.join(rootDir, 'auth-users-config.json');
const seedSqlPath = path.join(rootDir, 'supabase', 'seed.sql');

// Email to user role mapping (from test users in seed-auth-users.ts)
const emailToRole: Record<string, string> = {
  'admin@acme.com': 'admin',
  'manager@acme.com': 'manager',
  'engineer@acme.com': 'engineer',
  'user@acme.com': 'agent',
  'admin@techsolutions.com': 'admin',
  'manager@techsolutions.com': 'manager',
  'admin@globaltrading.com': 'admin',
};

async function syncAuthToSql(): Promise<void> {
  console.log('\nüîÑ Syncing Auth Users to seed.sql');
  console.log('='.repeat(60));

  // Check if auth config exists
  if (!fs.existsSync(authConfigPath)) {
    console.error(
      '‚ùå Error: auth-users-config.json not found. Run seed:auth first.'
    );
    process.exit(1);
  }

  // Read auth config
  const authConfigContent = fs.readFileSync(authConfigPath, 'utf-8');
  const authConfig: AuthConfig = JSON.parse(authConfigContent);

  console.log(`üìç Found ${authConfig.users.length} auth users`);

  // Check if seed.sql exists
  if (!fs.existsSync(seedSqlPath)) {
    console.error('‚ùå Error: supabase/seed.sql not found.');
    process.exit(1);
  }

  // Read seed.sql
  let seedSqlContent = fs.readFileSync(seedSqlPath, 'utf-8');

  // Create mapping of old IDs to new IDs
  const userMappings: UserMapping[] = [];

  // Dynamically extract current user IDs from seed.sql
  // Parse the INSERT INTO users statement to find email -> current_id mapping
  const usersInsertMatch = seedSqlContent.match(
    /INSERT INTO users\s*\([^)]*\)\s*VALUES\s*([\s\S]*?)(?=;|INSERT|$)/i
  );
  
  if (!usersInsertMatch) {
    console.error('‚ùå Error: Could not find users INSERT statement in seed.sql');
    process.exit(1);
  }

  const usersInsertValues = usersInsertMatch[1];
  
  // Extract email-to-id mappings from the INSERT statement
  // Pattern: ('id'::UUID, 'email', ...)
  const emailToCurrentId: Record<string, string> = {};
  const uuidPattern = /\('([a-f0-9-]{36})'::UUID,\s*'([^']+@[^']+)'/gi;
  let match;
  
  while ((match = uuidPattern.exec(usersInsertValues)) !== null) {
    const [, userId, email] = match;
    emailToCurrentId[email] = userId;
  }

  console.log(`üìç Found ${Object.keys(emailToCurrentId).length} existing users in seed.sql`);

  // Build replacement map by matching emails
  authConfig.users.forEach((authUser) => {
    const currentId = emailToCurrentId[authUser.email];
    
    if (currentId) {
      if (currentId !== authUser.userId) {
        userMappings.push({
          email: authUser.email,
          oldId: currentId,
          newId: authUser.userId,
        });
        
        console.log(
          `   ${authUser.email}: ${currentId} => ${authUser.userId}`
        );
      } else {
        console.log(
          `   ${authUser.email}: ‚úì Already synced (${authUser.userId})`
        );
      }
    } else {
      console.warn(
        `   ‚ö†Ô∏è  ${authUser.email}: Not found in seed.sql`
      );
    }
  });

  // Replace user IDs in seed.sql only if there are mappings to update
  let totalReplacements = 0;

  if (userMappings.length > 0) {
    console.log('\nüìù Updating seed.sql with actual user IDs...');

    userMappings.forEach((mapping) => {
      const pattern = new RegExp(
        `'${mapping.oldId}'::UUID`,
        'g'
      );
      const replacementCount = (seedSqlContent.match(pattern) || []).length;
      seedSqlContent = seedSqlContent.replace(
        pattern,
        `'${mapping.newId}'::UUID`
      );

      if (replacementCount > 0) {
        totalReplacements += replacementCount;
        console.log(`   ‚úÖ Replaced ${replacementCount} occurrences of ${mapping.oldId}`);
      }
    });

    // Write updated seed.sql
    fs.writeFileSync(seedSqlPath, seedSqlContent, 'utf-8');
    console.log('\nüíæ Updated seed.sql successfully');
  } else {
    console.log('\n‚úì All user IDs are already synced - no updates needed');
  }

  console.log('\n============================================================');
  console.log('üìä Summary');
  console.log('------------------------------------------------------------');
  if (userMappings.length > 0) {
    console.log(`‚úÖ Updated ${userMappings.length} user(s) with ${totalReplacements} total replacements`);
  } else {
    console.log('‚úÖ All users are in sync with auth credentials');
  }
  console.log(`üìÅ File: ${seedSqlPath}`);

  console.log('\n============================================================');
  console.log('‚ú® Sync complete!');
  console.log(
    '\nüìù Next Steps:'
  );
  console.log('   1. Run: supabase db reset');
  console.log('   2. Database users will now have matching IDs with auth users');
  console.log('============================================================\n');
}

// Run the sync
syncAuthToSql().catch((error) => {
  console.error('‚ùå Error:', error.message);
  process.exit(1);
});